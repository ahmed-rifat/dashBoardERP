"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsvectormap";
exports.ids = ["vendor-chunks/jsvectormap"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsvectormap/dist/jsvectormap.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/jsvectormap/dist/jsvectormap.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/**\n * By https://github.com/TehShrike/deepmerge\n */\n\nvar isMergeableObject = function isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n  return !!value && typeof value === 'object';\n}\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isNode(value) || isReactElement(value);\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nfunction isReactElement(value) {\n  return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isNode(value) {\n  return value instanceof Node;\n}\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\nfunction getMergeFunction(key, options) {\n  if (!options.customMerge) {\n    return deepmerge;\n  }\n  var customMerge = options.customMerge(key);\n  return typeof customMerge === 'function' ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n    return target.propertyIsEnumerable(symbol);\n  }) : [];\n}\nfunction getKeys(target) {\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n  try {\n    return property in object;\n  } catch (_) {\n    return false;\n  }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\nfunction mergeObject(target, source, options) {\n  var destination = {};\n  if (options.isMergeableObject(target)) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n  getKeys(source).forEach(function (key) {\n    if (propertyIsUnsafe(target, key)) {\n      return;\n    }\n    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    }\n  });\n  return destination;\n}\nvar deepmerge = function deepmerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n};\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\nvar getElement = function getElement(selector) {\n  if (typeof selector === 'object' && typeof selector.nodeType !== 'undefined') {\n    return selector;\n  }\n  if (typeof selector === 'string') {\n    return document.querySelector(selector);\n  }\n  return null;\n};\nvar createElement = function createElement(type, classes, content, html) {\n  if (html === void 0) {\n    html = false;\n  }\n  var el = document.createElement(type);\n  if (content) {\n    el[!html ? 'textContent' : 'innerHTML'] = content;\n  }\n  if (classes) {\n    el.className = classes;\n  }\n  return el;\n};\nvar findElement = function findElement(parentElement, selector) {\n  return Element.prototype.querySelector.call(parentElement, selector);\n};\nvar removeElement = function removeElement(target) {\n  target.parentNode.removeChild(target);\n};\nvar isImageUrl = function isImageUrl(url) {\n  return /\\.(jpg|gif|png)$/.test(url);\n};\nvar hyphenate = function hyphenate(string) {\n  return string.replace(/[\\w]([A-Z])/g, function (m) {\n    return m[0] + \"-\" + m[1];\n  }).toLowerCase();\n};\nvar merge = function merge(target, source, deep) {\n  if (deep === void 0) {\n    deep = false;\n  }\n  if (deep) {\n    return deepmerge(target, source);\n  }\n  return Object.assign(target, source);\n};\nvar getLineUid = function getLineUid(from, to) {\n  return from.toLowerCase() + \":to:\" + to.toLowerCase();\n};\nvar inherit = function inherit(target, source) {\n  Object.assign(target.prototype, source);\n};\n\nvar eventRegistry = {};\nvar eventUid = 1;\n\n/**\n * ------------------------------------------------------------------------\n * Event Handler\n * ------------------------------------------------------------------------\n */\nvar EventHandler = {\n  on: function on(element, event, handler, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var uid = \"jvm:\" + event + \"::\" + eventUid++;\n    eventRegistry[uid] = {\n      selector: element,\n      handler: handler\n    };\n    handler._uid = uid;\n    element.addEventListener(event, handler, options);\n  },\n  delegate: function delegate(element, event, selector, handler) {\n    event = event.split(' ');\n    event.forEach(function (eventName) {\n      EventHandler.on(element, eventName, function (e) {\n        var target = e.target;\n        if (target.matches(selector)) {\n          handler.call(target, e);\n        }\n      });\n    });\n  },\n  off: function off(element, event, handler) {\n    var eventType = event.split(':')[1];\n    element.removeEventListener(eventType, handler);\n    delete eventRegistry[handler._uid];\n  },\n  flush: function flush() {\n    Object.keys(eventRegistry).forEach(function (event) {\n      EventHandler.off(eventRegistry[event].selector, event, eventRegistry[event].handler);\n    });\n  },\n  getEventRegistry: function getEventRegistry() {\n    return eventRegistry;\n  }\n};\n\nfunction setupContainerEvents() {\n  var _this = this;\n  var map = this;\n  var mouseDown = false;\n  var oldPageX;\n  var oldPageY;\n  if (this.params.draggable) {\n    EventHandler.on(this.container, 'mousemove', function (e) {\n      if (!mouseDown) {\n        return false;\n      }\n      map.transX -= (oldPageX - e.pageX) / map.scale;\n      map.transY -= (oldPageY - e.pageY) / map.scale;\n      map._applyTransform();\n      oldPageX = e.pageX;\n      oldPageY = e.pageY;\n    });\n    EventHandler.on(this.container, 'mousedown', function (e) {\n      mouseDown = true;\n      oldPageX = e.pageX;\n      oldPageY = e.pageY;\n      return false;\n    });\n    EventHandler.on(document.body, 'mouseup', function () {\n      mouseDown = false;\n    });\n  }\n  if (this.params.zoomOnScroll) {\n    EventHandler.on(this.container, 'wheel', function (event) {\n      var deltaY = ((event.deltaY || -event.wheelDelta || event.detail) >> 10 || 1) * 75;\n      var rect = _this.container.getBoundingClientRect();\n      var offsetX = event.pageX - rect.left - window.pageXOffset;\n      var offsetY = event.pageY - rect.top - window.pageYOffset;\n      var zoomStep = Math.pow(1 + map.params.zoomOnScrollSpeed / 1000, -1.5 * deltaY);\n      if (map.tooltip) {\n        map._tooltip.hide();\n      }\n      map._setScale(map.scale * zoomStep, offsetX, offsetY);\n      event.preventDefault();\n    });\n  }\n}\n\nvar Events = {\n  onLoaded: 'map:loaded',\n  onViewportChange: 'viewport:changed',\n  onRegionClick: 'region:clicked',\n  onMarkerClick: 'marker:clicked',\n  onRegionSelected: 'region:selected',\n  onMarkerSelected: 'marker:selected',\n  onRegionTooltipShow: 'region.tooltip:show',\n  onMarkerTooltipShow: 'marker.tooltip:show',\n  onDestroyed: 'map:destroyed'\n};\n\nvar parseEvent = function parseEvent(map, selector, isTooltip) {\n  var element = getElement(selector);\n  var type = element.getAttribute('class').indexOf('jvm-region') === -1 ? 'marker' : 'region';\n  var isRegion = type === 'region';\n  var code = isRegion ? element.getAttribute('data-code') : element.getAttribute('data-index');\n  var event = isRegion ? Events.onRegionSelected : Events.onMarkerSelected;\n\n  // Init tooltip event\n  if (isTooltip) {\n    event = isRegion ? Events.onRegionTooltipShow : Events.onMarkerTooltipShow;\n  }\n  return {\n    type: type,\n    code: code,\n    event: event,\n    element: isRegion ? map.regions[code].element : map._markers[code].element,\n    tooltipText: isRegion ? map._mapData.paths[code].name || '' : map._markers[code].config.name || ''\n  };\n};\nfunction setupElementEvents() {\n  var map = this;\n  var container = this.container;\n  var pageX, pageY, mouseMoved;\n  EventHandler.on(container, 'mousemove', function (event) {\n    if (Math.abs(pageX - event.pageX) + Math.abs(pageY - event.pageY) > 2) {\n      mouseMoved = true;\n    }\n  });\n\n  // When the mouse is pressed\n  EventHandler.delegate(container, 'mousedown', '.jvm-element', function (event) {\n    pageX = event.pageX;\n    pageY = event.pageY;\n    mouseMoved = false;\n  });\n\n  // When the mouse is over the region/marker | When the mouse is out the region/marker\n  EventHandler.delegate(container, 'mouseover mouseout', '.jvm-element', function (event) {\n    var data = parseEvent(map, this, true);\n    var showTooltip = map.params.showTooltip;\n    if (event.type === 'mouseover') {\n      data.element.hover(true);\n      if (showTooltip) {\n        map._tooltip.text(data.tooltipText);\n        map._tooltip.show();\n        map._emit(data.event, [event, map._tooltip, data.code]);\n      }\n    } else {\n      data.element.hover(false);\n      if (showTooltip) {\n        map._tooltip.hide();\n      }\n    }\n  });\n\n  // When the click is released\n  EventHandler.delegate(container, 'mouseup', '.jvm-element', function (event) {\n    var data = parseEvent(map, this);\n    if (mouseMoved) {\n      return;\n    }\n    if (data.type === 'region' && map.params.regionsSelectable || data.type === 'marker' && map.params.markersSelectable) {\n      var element = data.element;\n\n      // We're checking if regions/markers|SelectableOne option is presented\n      if (map.params[data.type + \"sSelectableOne\"]) {\n        map._clearSelected(data.type + \"s\");\n      }\n      if (data.element.isSelected) {\n        element.select(false);\n      } else {\n        element.select(true);\n      }\n      map._emit(data.event, [data.code, element.isSelected, map._getSelected(data.type + \"s\")]);\n    }\n  });\n\n  // When region/marker is clicked\n  EventHandler.delegate(container, 'click', '.jvm-element', function (event) {\n    var _parseEvent = parseEvent(map, this),\n      type = _parseEvent.type,\n      code = _parseEvent.code;\n    map._emit(type === 'region' ? Events.onRegionClick : Events.onMarkerClick, [event, code]);\n  });\n}\n\nfunction setupZoomButtons() {\n  var _this = this;\n  var zoomin = createElement('div', 'jvm-zoom-btn jvm-zoomin', '&#43;', true);\n  var zoomout = createElement('div', 'jvm-zoom-btn jvm-zoomout', '&#x2212', true);\n  this.container.appendChild(zoomin);\n  this.container.appendChild(zoomout);\n  var handler = function handler(zoomin) {\n    if (zoomin === void 0) {\n      zoomin = true;\n    }\n    return function () {\n      return _this._setScale(zoomin ? _this.scale * _this.params.zoomStep : _this.scale / _this.params.zoomStep, _this._width / 2, _this._height / 2, false, _this.params.zoomAnimate);\n    };\n  };\n  EventHandler.on(zoomin, 'click', handler());\n  EventHandler.on(zoomout, 'click', handler(false));\n}\n\nfunction setupContainerTouchEvents() {\n  var map = this,\n    touchStartScale,\n    touchStartDistance,\n    touchX,\n    touchY,\n    centerTouchX,\n    centerTouchY,\n    lastTouchesLength;\n  var handleTouchEvent = function handleTouchEvent(e) {\n    var touches = e.touches;\n    var offset, scale, transXOld, transYOld;\n    if (e.type == 'touchstart') {\n      lastTouchesLength = 0;\n    }\n    if (touches.length == 1) {\n      if (lastTouchesLength == 1) {\n        transXOld = map.transX;\n        transYOld = map.transY;\n        map.transX -= (touchX - touches[0].pageX) / map.scale;\n        map.transY -= (touchY - touches[0].pageY) / map.scale;\n        map._tooltip.hide();\n        map._applyTransform();\n        if (transXOld != map.transX || transYOld != map.transY) {\n          e.preventDefault();\n        }\n      }\n      touchX = touches[0].pageX;\n      touchY = touches[0].pageY;\n    } else if (touches.length == 2) {\n      if (lastTouchesLength == 2) {\n        scale = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2)) / touchStartDistance;\n        map._setScale(touchStartScale * scale, centerTouchX, centerTouchY);\n        map._tooltip.hide();\n        e.preventDefault();\n      } else {\n        var rect = map.container.getBoundingClientRect();\n        offset = {\n          top: rect.top + window.scrollY,\n          left: rect.left + window.scrollX\n        };\n        if (touches[0].pageX > touches[1].pageX) {\n          centerTouchX = touches[1].pageX + (touches[0].pageX - touches[1].pageX) / 2;\n        } else {\n          centerTouchX = touches[0].pageX + (touches[1].pageX - touches[0].pageX) / 2;\n        }\n        if (touches[0].pageY > touches[1].pageY) {\n          centerTouchY = touches[1].pageY + (touches[0].pageY - touches[1].pageY) / 2;\n        } else {\n          centerTouchY = touches[0].pageY + (touches[1].pageY - touches[0].pageY) / 2;\n        }\n        centerTouchX -= offset.left;\n        centerTouchY -= offset.top;\n        touchStartScale = map.scale;\n        touchStartDistance = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));\n      }\n    }\n    lastTouchesLength = touches.length;\n  };\n  EventHandler.on(map.container, 'touchstart', handleTouchEvent);\n  EventHandler.on(map.container, 'touchmove', handleTouchEvent);\n}\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _createForOfIteratorHelperLoose(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (t) return (t = t.call(r)).next.bind(t);\n  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) {\n    t && (r = t);\n    var o = 0;\n    return function () {\n      return o >= r.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: r[o++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar BaseComponent = /*#__PURE__*/function () {\n  function BaseComponent() {}\n  var _proto = BaseComponent.prototype;\n  _proto.dispose = function dispose() {\n    if (this._tooltip) {\n      removeElement(this._tooltip);\n    } else {\n      // @todo: move shape in base component in v2\n      this.shape.remove();\n    }\n    for (var _iterator = _createForOfIteratorHelperLoose(Object.getOwnPropertyNames(this)), _step; !(_step = _iterator()).done;) {\n      var propertyName = _step.value;\n      this[propertyName] = null;\n    }\n  };\n  return BaseComponent;\n}();\n\n/**\n * ------------------------------------------------------------------------\n * Interactable\n * ------------------------------------------------------------------------\n */\nvar Interactable = {\n  getLabelText: function getLabelText(key, label) {\n    if (!label) {\n      return;\n    }\n    if (typeof label.render === 'function') {\n      var params = [];\n\n      // Pass additional paramater (Marker config object) in case it's a Marker.\n      if (this.config && this.config.marker) {\n        params.push(this.config.marker);\n      }\n\n      // Becuase we need to add the key always at the end\n      params.push(key);\n      return label.render.apply(this, params);\n    }\n    return key;\n  },\n  getLabelOffsets: function getLabelOffsets(key, label) {\n    if (typeof label.offsets === 'function') {\n      return label.offsets(key);\n    }\n\n    // If offsets are an array of offsets e.g offsets: [ [0, 25], [10, 15] ]\n    if (Array.isArray(label.offsets)) {\n      return label.offsets[key];\n    }\n    return [0, 0];\n  },\n  setStyle: function setStyle(property, value) {\n    this.shape.setStyle(property, value);\n  },\n  remove: function remove() {\n    this.shape.remove();\n    if (this.label) this.label.remove();\n  },\n  hover: function hover(state) {\n    this._setStatus('isHovered', state);\n  },\n  select: function select(state) {\n    this._setStatus('isSelected', state);\n  },\n  // Private\n  _setStatus: function _setStatus(property, state) {\n    this.shape[property] = state;\n    this.shape.updateStyle();\n    this[property] = state;\n    if (this.label) {\n      this.label[property] = state;\n      this.label.updateStyle();\n    }\n  }\n};\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Region = /*#__PURE__*/function (_BaseComponent) {\n  function Region(_ref) {\n    var _this;\n    var map = _ref.map,\n      code = _ref.code,\n      path = _ref.path,\n      style = _ref.style,\n      label = _ref.label,\n      labelStyle = _ref.labelStyle,\n      labelsGroup = _ref.labelsGroup;\n    _this = _BaseComponent.call(this) || this;\n    _this._map = map;\n    _this.shape = _this._createRegion(path, code, style);\n    var text = _this.getLabelText(code, label);\n\n    // If label is passed and render function returns something \n    if (label && text) {\n      var bbox = _this.shape.getBBox();\n      var offsets = _this.getLabelOffsets(code, label);\n      _this.labelX = bbox.x + bbox.width / 2 + offsets[0];\n      _this.labelY = bbox.y + bbox.height / 2 + offsets[1];\n      _this.label = _this._map.canvas.createText({\n        text: text,\n        textAnchor: 'middle',\n        alignmentBaseline: 'central',\n        dataCode: code,\n        x: _this.labelX,\n        y: _this.labelY\n      }, labelStyle, labelsGroup);\n      _this.label.addClass('jvm-region jvm-element');\n    }\n    return _this;\n  }\n  _inheritsLoose(Region, _BaseComponent);\n  var _proto = Region.prototype;\n  _proto._createRegion = function _createRegion(path, code, style) {\n    path = this._map.canvas.createPath({\n      d: path,\n      dataCode: code\n    }, style);\n    path.addClass('jvm-region jvm-element');\n    return path;\n  };\n  _proto.updateLabelPosition = function updateLabelPosition() {\n    if (this.label) {\n      this.label.set({\n        x: this.labelX * this._map.scale + this._map.transX * this._map.scale,\n        y: this.labelY * this._map.scale + this._map.transY * this._map.scale\n      });\n    }\n  };\n  return Region;\n}(BaseComponent);\ninherit(Region, Interactable);\n\nfunction createRegions() {\n  this._regionLabelsGroup = this._regionLabelsGroup || this.canvas.createGroup('jvm-regions-labels-group');\n  for (var code in this._mapData.paths) {\n    var region = new Region({\n      map: this,\n      code: code,\n      path: this._mapData.paths[code].path,\n      style: merge({}, this.params.regionStyle),\n      labelStyle: this.params.regionLabelStyle,\n      labelsGroup: this._regionLabelsGroup,\n      label: this.params.labels && this.params.labels.regions\n    });\n    this.regions[code] = {\n      config: this._mapData.paths[code],\n      element: region\n    };\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Line = /*#__PURE__*/function (_BaseComponent) {\n  function Line(_ref) {\n    var _this;\n    var index = _ref.index,\n      map = _ref.map,\n      style = _ref.style,\n      x1 = _ref.x1,\n      y1 = _ref.y1,\n      x2 = _ref.x2,\n      y2 = _ref.y2,\n      group = _ref.group,\n      config = _ref.config;\n    _this = _BaseComponent.call(this) || this;\n    _this.config = config;\n    _this.shape = map.canvas.createLine({\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      dataIndex: index\n    }, style, group);\n    _this.shape.addClass('jvm-line');\n    return _this;\n  }\n  _inheritsLoose(Line, _BaseComponent);\n  var _proto = Line.prototype;\n  _proto.setStyle = function setStyle(property, value) {\n    this.shape.setStyle(property, value);\n  };\n  return Line;\n}(BaseComponent);\n\nfunction createLines(lines, markers, isRecentlyCreated) {\n  if (isRecentlyCreated === void 0) {\n    isRecentlyCreated = false;\n  }\n  var point1 = false,\n    point2 = false;\n\n  // Create group for holding lines\n  // we're checking if `linesGroup` exists or not becuase we may add lines\n  // after the map has loaded so we will append the futured lines to this group as well.\n  this.linesGroup = this.linesGroup || this.canvas.createGroup('jvm-lines-group');\n  for (var index in lines) {\n    var config = lines[index];\n    for (var mindex in markers) {\n      var markerConfig = isRecentlyCreated ? markers[mindex].config : markers[mindex];\n      if (markerConfig.name === config.from) {\n        point1 = this.getMarkerPosition(markerConfig);\n      }\n      if (markerConfig.name === config.to) {\n        point2 = this.getMarkerPosition(markerConfig);\n      }\n    }\n    if (point1 !== false && point2 !== false) {\n      // Register lines with unique keys\n      this._lines[getLineUid(config.from, config.to)] = new Line({\n        index: index,\n        map: this,\n        // Merge the default `lineStyle` object with the custom `line` config style\n        style: merge({\n          initial: this.params.lineStyle\n        }, {\n          initial: config.style || {}\n        }, true),\n        x1: point1.x,\n        y1: point1.y,\n        x2: point2.x,\n        y2: point2.y,\n        group: this.linesGroup,\n        config: config\n      });\n    }\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Marker = /*#__PURE__*/function (_BaseComponent) {\n  function Marker(_ref) {\n    var _this;\n    var index = _ref.index,\n      style = _ref.style,\n      label = _ref.label,\n      cx = _ref.cx,\n      cy = _ref.cy,\n      map = _ref.map,\n      group = _ref.group;\n    _this = _BaseComponent.call(this) || this;\n\n    // Private\n    _this._map = map;\n    _this._isImage = !!style.initial.image;\n\n    // Protected\n    _this.config = arguments[0];\n    _this.shape = map.canvas[_this._isImage ? 'createImage' : 'createCircle']({\n      dataIndex: index,\n      cx: cx,\n      cy: cy\n    }, style, group);\n    _this.shape.addClass('jvm-marker jvm-element');\n    if (_this._isImage) {\n      _this.updateLabelPosition();\n    }\n    if (label) {\n      _this._createLabel(_this.config);\n    }\n    return _this;\n  }\n  _inheritsLoose(Marker, _BaseComponent);\n  var _proto = Marker.prototype;\n  _proto.updateLabelPosition = function updateLabelPosition() {\n    if (this.label) {\n      this.label.set({\n        x: this._labelX * this._map.scale + this._offsets[0] + this._map.transX * this._map.scale + 5 + (this._isImage ? (this.shape.width || 0) / 2 : this.shape.node.r.baseVal.value),\n        y: this._labelY * this._map.scale + this._map.transY * this._map.scale + this._offsets[1]\n      });\n    }\n  };\n  _proto._createLabel = function _createLabel(_ref2) {\n    var index = _ref2.index,\n      map = _ref2.map,\n      label = _ref2.label,\n      labelsGroup = _ref2.labelsGroup,\n      cx = _ref2.cx,\n      cy = _ref2.cy,\n      marker = _ref2.marker,\n      isRecentlyCreated = _ref2.isRecentlyCreated;\n    var labelText = this.getLabelText(index, label);\n    this._labelX = cx / map.scale - map.transX;\n    this._labelY = cy / map.scale - map.transY;\n    this._offsets = isRecentlyCreated && marker.offsets ? marker.offsets : this.getLabelOffsets(index, label);\n    this.label = map.canvas.createText({\n      text: labelText,\n      dataIndex: index,\n      x: this._labelX,\n      y: this._labelY,\n      dy: '0.6ex'\n    }, map.params.markerLabelStyle, labelsGroup);\n    this.label.addClass('jvm-marker jvm-element');\n    if (isRecentlyCreated) {\n      this.updateLabelPosition();\n    }\n  };\n  return Marker;\n}(BaseComponent);\ninherit(Marker, Interactable);\n\nfunction createMarkers(markers, isRecentlyCreated) {\n  var _this = this;\n  if (markers === void 0) {\n    markers = {};\n  }\n  if (isRecentlyCreated === void 0) {\n    isRecentlyCreated = false;\n  }\n  // Create groups for holding markers and markers labels\n  // We're checking if `markersGroup` exists or not becuase we may add markers after the map has loaded\n  // So we will append the futured markers to this group as well.\n  this._markersGroup = this._markersGroup || this.canvas.createGroup('jvm-markers-group');\n  this._markerLabelsGroup = this._markerLabelsGroup || this.canvas.createGroup('jvm-markers-labels-group');\n  var _loop = function _loop() {\n      var config = markers[index];\n      var point = _this.getMarkerPosition(config);\n      var uid = config.coords.join(':');\n      if (!point) {\n        return 0; // continue\n      }\n\n      // We're checking if recently created marker does already exist\n      // If it does we don't need to create it again, so we'll continue\n      // Becuase we may have more than one marker submitted via `addMarkers` method.\n      if (isRecentlyCreated) {\n        if (Object.keys(_this._markers).filter(function (i) {\n          return _this._markers[i]._uid === uid;\n        }).length) {\n          return 0; // continue\n        }\n        index = Object.keys(_this._markers).length;\n      }\n      var marker = new Marker({\n        index: index,\n        map: _this,\n        // Merge the `markerStyle` object with the marker config `style` if presented.\n        style: merge(_this.params.markerStyle, _extends({}, config.style || {}), true),\n        label: _this.params.labels && _this.params.labels.markers,\n        labelsGroup: _this._markerLabelsGroup,\n        cx: point.x,\n        cy: point.y,\n        group: _this._markersGroup,\n        marker: config,\n        isRecentlyCreated: isRecentlyCreated\n      });\n\n      // Check for marker duplication\n      // this is useful when for example: a user clicks a button for creating marker two times\n      // so it will remove the old one and the new one will take its place.\n      if (_this._markers[index]) {\n        _this.removeMarkers([index]);\n      }\n      _this._markers[index] = {\n        _uid: uid,\n        config: config,\n        element: marker\n      };\n    },\n    _ret;\n  for (var index in markers) {\n    _ret = _loop();\n    if (_ret === 0) continue;\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Legend = /*#__PURE__*/function () {\n  function Legend(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._options = options;\n    this._map = this._options.map;\n    this._series = this._options.series;\n    this._body = createElement('div', 'jvm-legend');\n    if (this._options.cssClass) {\n      this._body.setAttribute('class', this._options.cssClass);\n    }\n    if (options.vertical) {\n      this._map.legendVertical.appendChild(this._body);\n    } else {\n      this._map.legendHorizontal.appendChild(this._body);\n    }\n    this.render();\n  }\n  var _proto = Legend.prototype;\n  _proto.render = function render() {\n    var ticks = this._series.scale.getTicks();\n    var inner = createElement('div', 'jvm-legend-inner');\n    this._body.innderHTML = '';\n    if (this._options.title) {\n      var legendTitle = createElement('div', 'jvm-legend-title', this._options.title);\n      this._body.appendChild(legendTitle);\n    }\n    this._body.appendChild(inner);\n    for (var i = 0; i < ticks.length; i++) {\n      var tick = createElement('div', 'jvm-legend-tick');\n      var sample = createElement('div', 'jvm-legend-tick-sample');\n      switch (this._series.config.attribute) {\n        case 'fill':\n          if (isImageUrl(ticks[i].value)) {\n            sample.style.background = \"url(\" + ticks[i].value + \")\";\n          } else {\n            sample.style.background = ticks[i].value;\n          }\n          break;\n        case 'stroke':\n          sample.style.background = ticks[i].value;\n          break;\n        case 'image':\n          sample.style.background = \"url(\" + (typeof ticks[i].value === 'object' ? ticks[i].value.url : ticks[i].value) + \") no-repeat center center\";\n          sample.style.backgroundSize = 'cover';\n          break;\n      }\n      tick.appendChild(sample);\n      var label = ticks[i].label;\n      if (this._options.labelRender) {\n        label = this._options.labelRender(label);\n      }\n      var tickText = createElement('div', 'jvm-legend-tick-text', label);\n      tick.appendChild(tickText);\n      inner.appendChild(tick);\n    }\n  };\n  return Legend;\n}();\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar OrdinalScale = /*#__PURE__*/function () {\n  function OrdinalScale(scale) {\n    this._scale = scale;\n  }\n  var _proto = OrdinalScale.prototype;\n  _proto.getValue = function getValue(value) {\n    return this._scale[value];\n  };\n  _proto.getTicks = function getTicks() {\n    var ticks = [];\n    for (var key in this._scale) {\n      ticks.push({\n        label: key,\n        value: this._scale[key]\n      });\n    }\n    return ticks;\n  };\n  return OrdinalScale;\n}();\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Series = /*#__PURE__*/function () {\n  function Series(config, elements, map) {\n    if (config === void 0) {\n      config = {};\n    }\n    // Private\n    this._map = map;\n    this._elements = elements; // Could be markers or regions\n    this._values = config.values || {};\n\n    // Protected\n    this.config = config;\n    this.config.attribute = config.attribute || 'fill';\n\n    // Set initial attributes\n    if (config.attributes) {\n      this.setAttributes(config.attributes);\n    }\n    if (typeof config.scale === 'object') {\n      this.scale = new OrdinalScale(config.scale);\n    }\n    if (this.config.legend) {\n      this.legend = new Legend(merge({\n        map: this._map,\n        series: this\n      }, this.config.legend));\n    }\n    this.setValues(this._values);\n  }\n  var _proto = Series.prototype;\n  _proto.setValues = function setValues(values) {\n    var attrs = {};\n    for (var key in values) {\n      if (values[key]) {\n        attrs[key] = this.scale.getValue(values[key]);\n      }\n    }\n    this.setAttributes(attrs);\n  };\n  _proto.setAttributes = function setAttributes(attrs) {\n    for (var code in attrs) {\n      if (this._elements[code]) {\n        this._elements[code].element.setStyle(this.config.attribute, attrs[code]);\n      }\n    }\n  };\n  _proto.clear = function clear() {\n    var key,\n      attrs = {};\n    for (key in this._values) {\n      if (this._elements[key]) {\n        attrs[key] = this._elements[key].element.shape.style.initial[this.config.attribute];\n      }\n    }\n    this.setAttributes(attrs);\n    this._values = {};\n  };\n  return Series;\n}();\n\nfunction createSeries() {\n  this.series = {\n    markers: [],\n    regions: []\n  };\n  for (var key in this.params.series) {\n    for (var i = 0; i < this.params.series[key].length; i++) {\n      this.series[key][i] = new Series(this.params.series[key][i], key === 'markers' ? this._markers : this.regions, this);\n    }\n  }\n}\n\nfunction applyTransform() {\n  var maxTransX, maxTransY, minTransX, minTransY;\n  if (this._defaultWidth * this.scale <= this._width) {\n    maxTransX = (this._width - this._defaultWidth * this.scale) / (2 * this.scale);\n    minTransX = (this._width - this._defaultWidth * this.scale) / (2 * this.scale);\n  } else {\n    maxTransX = 0;\n    minTransX = (this._width - this._defaultWidth * this.scale) / this.scale;\n  }\n  if (this._defaultHeight * this.scale <= this._height) {\n    maxTransY = (this._height - this._defaultHeight * this.scale) / (2 * this.scale);\n    minTransY = (this._height - this._defaultHeight * this.scale) / (2 * this.scale);\n  } else {\n    maxTransY = 0;\n    minTransY = (this._height - this._defaultHeight * this.scale) / this.scale;\n  }\n  if (this.transY > maxTransY) {\n    this.transY = maxTransY;\n  } else if (this.transY < minTransY) {\n    this.transY = minTransY;\n  }\n  if (this.transX > maxTransX) {\n    this.transX = maxTransX;\n  } else if (this.transX < minTransX) {\n    this.transX = minTransX;\n  }\n  this.canvas.applyTransformParams(this.scale, this.transX, this.transY);\n  if (this._markers) {\n    this._repositionMarkers();\n  }\n  if (this._lines) {\n    this._repositionLines();\n  }\n  this._repositionLabels();\n}\n\nfunction resize() {\n  var curBaseScale = this._baseScale;\n  if (this._width / this._height > this._defaultWidth / this._defaultHeight) {\n    this._baseScale = this._height / this._defaultHeight;\n    this._baseTransX = Math.abs(this._width - this._defaultWidth * this._baseScale) / (2 * this._baseScale);\n  } else {\n    this._baseScale = this._width / this._defaultWidth;\n    this._baseTransY = Math.abs(this._height - this._defaultHeight * this._baseScale) / (2 * this._baseScale);\n  }\n  this.scale *= this._baseScale / curBaseScale;\n  this.transX *= this._baseScale / curBaseScale;\n  this.transY *= this._baseScale / curBaseScale;\n}\n\nfunction setScale(scale, anchorX, anchorY, isCentered, animate) {\n  var _this = this;\n  var zoomStep,\n    interval,\n    i = 0,\n    count = Math.abs(Math.round((scale - this.scale) * 60 / Math.max(scale, this.scale))),\n    scaleStart,\n    scaleDiff,\n    transXStart,\n    transXDiff,\n    transYStart,\n    transYDiff,\n    transX,\n    transY;\n  if (scale > this.params.zoomMax * this._baseScale) {\n    scale = this.params.zoomMax * this._baseScale;\n  } else if (scale < this.params.zoomMin * this._baseScale) {\n    scale = this.params.zoomMin * this._baseScale;\n  }\n  if (typeof anchorX != 'undefined' && typeof anchorY != 'undefined') {\n    zoomStep = scale / this.scale;\n    if (isCentered) {\n      transX = anchorX + this._defaultWidth * (this._width / (this._defaultWidth * scale)) / 2;\n      transY = anchorY + this._defaultHeight * (this._height / (this._defaultHeight * scale)) / 2;\n    } else {\n      transX = this.transX - (zoomStep - 1) / scale * anchorX;\n      transY = this.transY - (zoomStep - 1) / scale * anchorY;\n    }\n  }\n  if (animate && count > 0) {\n    scaleStart = this.scale;\n    scaleDiff = (scale - scaleStart) / count;\n    transXStart = this.transX * this.scale;\n    transYStart = this.transY * this.scale;\n    transXDiff = (transX * scale - transXStart) / count;\n    transYDiff = (transY * scale - transYStart) / count;\n    interval = setInterval(function () {\n      i += 1;\n      _this.scale = scaleStart + scaleDiff * i;\n      _this.transX = (transXStart + transXDiff * i) / _this.scale;\n      _this.transY = (transYStart + transYDiff * i) / _this.scale;\n      _this._applyTransform();\n      if (i == count) {\n        clearInterval(interval);\n        _this._emit(Events.onViewportChange, [_this.scale, _this.transX, _this.transY]);\n      }\n    }, 10);\n  } else {\n    this.transX = transX;\n    this.transY = transY;\n    this.scale = scale;\n    this._applyTransform();\n    this._emit(Events.onViewportChange, [this.scale, this.transX, this.transY]);\n  }\n}\n\nfunction setFocus(config) {\n  var _this = this;\n  if (config === void 0) {\n    config = {};\n  }\n  var bbox,\n    codes = [];\n  if (config.region) {\n    codes.push(config.region);\n  } else if (config.regions) {\n    codes = config.regions;\n  }\n  if (codes.length) {\n    codes.forEach(function (code) {\n      if (_this.regions[code]) {\n        var itemBbox = _this.regions[code].element.shape.getBBox();\n        if (itemBbox) {\n          // Handle the first loop\n          if (typeof bbox == 'undefined') {\n            bbox = itemBbox;\n          } else {\n            // get the old bbox properties plus the current\n            // this kinda incrementing the old values and the new values\n            bbox = {\n              x: Math.min(bbox.x, itemBbox.x),\n              y: Math.min(bbox.y, itemBbox.y),\n              width: Math.max(bbox.x + bbox.width, itemBbox.x + itemBbox.width) - Math.min(bbox.x, itemBbox.x),\n              height: Math.max(bbox.y + bbox.height, itemBbox.y + itemBbox.height) - Math.min(bbox.y, itemBbox.y)\n            };\n          }\n        }\n      }\n    });\n    return this._setScale(Math.min(this._width / bbox.width, this._height / bbox.height), -(bbox.x + bbox.width / 2), -(bbox.y + bbox.height / 2), true, config.animate);\n  } else if (config.coords) {\n    var point = this.coordsToPoint(config.coords[0], config.coords[1]);\n    var x = this.transX - point.x / this.scale;\n    var y = this.transY - point.y / this.scale;\n    return this._setScale(config.scale * this._baseScale, x, y, true, config.animate);\n  }\n}\n\nfunction updateSize() {\n  this._width = this.container.offsetWidth;\n  this._height = this.container.offsetHeight;\n  this._resize();\n  this.canvas.setSize(this._width, this._height);\n  this._applyTransform();\n}\n\n/**\n * ------------------------------------------------------------------------\n * Object\n * ------------------------------------------------------------------------\n */\nvar Proj = {\n  /* sgn(n){\n    if (n > 0) {\n      return 1;\n    } else if (n < 0) {\n      return -1;\n    } else {\n      return n;\n    }\n  }, */\n  mill: function mill(lat, lng, c) {\n    return {\n      x: this.radius * (lng - c) * this.radDeg,\n      y: -this.radius * Math.log(Math.tan((45 + 0.4 * lat) * this.radDeg)) / 0.8\n    };\n  },\n  /* mill_inv(x, y, c) {\n    return {\n      lat: (2.5 * Math.atan(Math.exp(0.8 * y / this.radius)) - 5 * Math.PI / 8) * this.degRad,\n      lng: (c * this.radDeg + x / this.radius) * this.degRad\n    };\n  }, */\n  merc: function merc(lat, lng, c) {\n    return {\n      x: this.radius * (lng - c) * this.radDeg,\n      y: -this.radius * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))\n    };\n  },\n  /* merc_inv(x, y, c) {\n    return {\n      lat: (2 * Math.atan(Math.exp(y / this.radius)) - Math.PI / 2) * this.degRad,\n      lng: (c * this.radDeg + x / this.radius) * this.degRad\n    };\n  }, */\n  aea: function aea(lat, lng, c) {\n    var fi0 = 0,\n      lambda0 = c * this.radDeg,\n      fi1 = 29.5 * this.radDeg,\n      fi2 = 45.5 * this.radDeg,\n      fi = lat * this.radDeg,\n      lambda = lng * this.radDeg,\n      n = (Math.sin(fi1) + Math.sin(fi2)) / 2,\n      C = Math.cos(fi1) * Math.cos(fi1) + 2 * n * Math.sin(fi1),\n      theta = n * (lambda - lambda0),\n      ro = Math.sqrt(C - 2 * n * Math.sin(fi)) / n,\n      ro0 = Math.sqrt(C - 2 * n * Math.sin(fi0)) / n;\n    return {\n      x: ro * Math.sin(theta) * this.radius,\n      y: -(ro0 - ro * Math.cos(theta)) * this.radius\n    };\n  },\n  /* aea_inv(xCoord, yCoord, c) {\n    var x = xCoord / this.radius,\n        y = yCoord / this.radius,\n        fi0 = 0,\n        lambda0 = c * this.radDeg,\n        fi1 = 29.5 * this.radDeg,\n        fi2 = 45.5 * this.radDeg,\n        n = (Math.sin(fi1)+Math.sin(fi2)) / 2,\n        C = Math.cos(fi1)*Math.cos(fi1)+2*n*Math.sin(fi1),\n        ro0 = Math.sqrt(C-2*n*Math.sin(fi0))/n,\n        ro = Math.sqrt(x*x+(ro0-y)*(ro0-y)),\n        theta = Math.atan( x / (ro0 - y) );\n     return {\n      lat: (Math.asin((C - ro * ro * n * n) / (2 * n))) * this.degRad,\n      lng: (lambda0 + theta / n) * this.degRad\n    };\n  }, */\n  lcc: function lcc(lat, lng, c) {\n    var fi0 = 0,\n      lambda0 = c * this.radDeg,\n      lambda = lng * this.radDeg,\n      fi1 = 33 * this.radDeg,\n      fi2 = 45 * this.radDeg,\n      fi = lat * this.radDeg,\n      n = Math.log(Math.cos(fi1) * (1 / Math.cos(fi2))) / Math.log(Math.tan(Math.PI / 4 + fi2 / 2) * (1 / Math.tan(Math.PI / 4 + fi1 / 2))),\n      F = Math.cos(fi1) * Math.pow(Math.tan(Math.PI / 4 + fi1 / 2), n) / n,\n      ro = F * Math.pow(1 / Math.tan(Math.PI / 4 + fi / 2), n),\n      ro0 = F * Math.pow(1 / Math.tan(Math.PI / 4 + fi0 / 2), n);\n    return {\n      x: ro * Math.sin(n * (lambda - lambda0)) * this.radius,\n      y: -(ro0 - ro * Math.cos(n * (lambda - lambda0))) * this.radius\n    };\n  }\n  /* lcc_inv(xCoord, yCoord, c) {\n    var x = xCoord / this.radius,\n        y = yCoord / this.radius,\n        fi0 = 0,\n        lambda0 = c * this.radDeg,\n        fi1 = 33 * this.radDeg,\n        fi2 = 45 * this.radDeg,\n        n = Math.log( Math.cos(fi1) * (1 / Math.cos(fi2)) ) / Math.log( Math.tan( Math.PI / 4 + fi2 / 2) * (1 / Math.tan( Math.PI / 4 + fi1 / 2) ) ),\n        F = ( Math.cos(fi1) * Math.pow( Math.tan( Math.PI / 4 + fi1 / 2 ), n ) ) / n,\n        ro0 = F * Math.pow( 1 / Math.tan( Math.PI / 4 + fi0 / 2 ), n ),\n        ro = this.sgn(n) * Math.sqrt(x*x+(ro0-y)*(ro0-y)),\n        theta = Math.atan( x / (ro0 - y) );\n     return {\n      lat: (2 * Math.atan(Math.pow(F/ro, 1/n)) - Math.PI / 2) * this.degRad,\n      lng: (lambda0 + theta / n) * this.degRad\n    };\n  } */\n};\nProj.degRad = 180 / Math.PI;\nProj.radDeg = Math.PI / 180;\nProj.radius = 6381372;\n\nfunction coordsToPoint(lat, lng) {\n  var projection = Map.maps[this.params.map].projection;\n  var _Proj$projection$type = Proj[projection.type](lat, lng, projection.centralMeridian),\n    x = _Proj$projection$type.x,\n    y = _Proj$projection$type.y;\n  var inset = this.getInsetForPoint(x, y);\n  if (!inset) {\n    return false;\n  }\n  var bbox = inset.bbox;\n  x = (x - bbox[0].x) / (bbox[1].x - bbox[0].x) * inset.width * this.scale;\n  y = (y - bbox[0].y) / (bbox[1].y - bbox[0].y) * inset.height * this.scale;\n  return {\n    x: x + this.transX * this.scale + inset.left * this.scale,\n    y: y + this.transY * this.scale + inset.top * this.scale\n  };\n}\n\nfunction getInsetForPoint(x, y) {\n  var insets = Map.maps[this.params.map].insets;\n  for (var index = 0; index < insets.length; index++) {\n    var _insets$index$bbox = insets[index].bbox,\n      start = _insets$index$bbox[0],\n      end = _insets$index$bbox[1];\n    if (x > start.x && x < end.x && y > start.y && y < end.y) {\n      return insets[index];\n    }\n  }\n}\n\nfunction getMarkerPosition(_ref) {\n  var coords = _ref.coords;\n  if (Map.maps[this.params.map].projection) {\n    return this.coordsToPoint.apply(this, coords);\n  }\n  return {\n    x: coords[0] * this.scale + this.transX * this.scale,\n    y: coords[1] * this.scale + this.transY * this.scale\n  };\n}\n\nfunction repositionLines() {\n  var point1 = false,\n    point2 = false;\n  for (var index in this._lines) {\n    for (var mindex in this._markers) {\n      var marker = this._markers[mindex];\n      if (marker.config.name === this._lines[index].config.from) {\n        point1 = this.getMarkerPosition(marker.config);\n      }\n      if (marker.config.name === this._lines[index].config.to) {\n        point2 = this.getMarkerPosition(marker.config);\n      }\n    }\n    if (point1 !== false && point2 !== false) {\n      this._lines[index].setStyle({\n        x1: point1.x,\n        y1: point1.y,\n        x2: point2.x,\n        y2: point2.y\n      });\n    }\n  }\n}\n\nfunction repositionMarkers() {\n  for (var index in this._markers) {\n    var point = this.getMarkerPosition(this._markers[index].config);\n    if (point !== false) {\n      this._markers[index].element.setStyle({\n        cx: point.x,\n        cy: point.y\n      });\n    }\n  }\n}\n\nfunction repositionLabels() {\n  var labels = this.params.labels;\n  if (!labels) {\n    return;\n  }\n\n  // Regions labels\n  if (labels.regions) {\n    for (var key in this.regions) {\n      this.regions[key].element.updateLabelPosition();\n    }\n  }\n\n  // Markers labels\n  if (labels.markers) {\n    for (var _key in this._markers) {\n      this._markers[_key].element.updateLabelPosition();\n    }\n  }\n}\n\nvar core = {\n  _setupContainerEvents: setupContainerEvents,\n  _setupElementEvents: setupElementEvents,\n  _setupZoomButtons: setupZoomButtons,\n  _setupContainerTouchEvents: setupContainerTouchEvents,\n  _createRegions: createRegions,\n  _createLines: createLines,\n  _createMarkers: createMarkers,\n  _createSeries: createSeries,\n  _applyTransform: applyTransform,\n  _resize: resize,\n  _setScale: setScale,\n  setFocus: setFocus,\n  updateSize: updateSize,\n  coordsToPoint: coordsToPoint,\n  getInsetForPoint: getInsetForPoint,\n  getMarkerPosition: getMarkerPosition,\n  _repositionLines: repositionLines,\n  _repositionMarkers: repositionMarkers,\n  _repositionLabels: repositionLabels\n};\n\nvar Defaults = {\n  map: 'world',\n  backgroundColor: 'transparent',\n  draggable: true,\n  zoomButtons: true,\n  zoomOnScroll: true,\n  zoomOnScrollSpeed: 3,\n  zoomMax: 12,\n  zoomMin: 1,\n  zoomAnimate: true,\n  showTooltip: true,\n  zoomStep: 1.5,\n  bindTouchEvents: true,\n  // Line options\n  lineStyle: {\n    stroke: '#808080',\n    strokeWidth: 1,\n    strokeLinecap: 'round'\n  },\n  // Marker options\n  markersSelectable: false,\n  markersSelectableOne: false,\n  markerStyle: {\n    initial: {\n      r: 7,\n      fill: '#374151',\n      fillOpacity: 1,\n      stroke: '#FFF',\n      strokeWidth: 5,\n      strokeOpacity: .5\n    },\n    hover: {\n      fill: '#3cc0ff',\n      cursor: 'pointer'\n    },\n    selected: {\n      fill: 'blue'\n    },\n    selectedHover: {}\n  },\n  markerLabelStyle: {\n    initial: {\n      fontFamily: 'Verdana',\n      fontSize: 12,\n      fontWeight: 500,\n      cursor: 'default',\n      fill: '#374151'\n    },\n    hover: {\n      cursor: 'pointer'\n    },\n    selected: {},\n    selectedHover: {}\n  },\n  // Region options\n  regionsSelectable: false,\n  regionsSelectableOne: false,\n  regionStyle: {\n    initial: {\n      fill: '#dee2e8',\n      fillOpacity: 1,\n      stroke: 'none',\n      strokeWidth: 0\n    },\n    hover: {\n      fillOpacity: .7,\n      cursor: 'pointer'\n    },\n    selected: {\n      fill: '#9ca3af'\n    },\n    selectedHover: {}\n  },\n  regionLabelStyle: {\n    initial: {\n      fontFamily: 'Verdana',\n      fontSize: '12',\n      fontWeight: 'bold',\n      cursor: 'default',\n      fill: '#35373e'\n    },\n    hover: {\n      cursor: 'pointer'\n    }\n  }\n};\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar SVGElement = /*#__PURE__*/function () {\n  function SVGElement(name, config) {\n    this.node = this._createElement(name);\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  // Create new SVG element `svg`, `g`, `path`, `line`, `circle`, `image`, etc.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS#important_namespace_uris\n  var _proto = SVGElement.prototype;\n  _proto._createElement = function _createElement(tagName) {\n    return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  };\n  _proto.addClass = function addClass(className) {\n    this.node.setAttribute('class', className);\n  };\n  _proto.getBBox = function getBBox() {\n    return this.node.getBBox();\n  }\n\n  // Apply attributes on the current node element\n  ;\n  _proto.set = function set(property, value) {\n    if (typeof property === 'object') {\n      for (var attr in property) {\n        this.applyAttr(attr, property[attr]);\n      }\n    } else {\n      this.applyAttr(property, value);\n    }\n  };\n  _proto.get = function get(property) {\n    return this.style.initial[property];\n  };\n  _proto.applyAttr = function applyAttr(property, value) {\n    this.node.setAttribute(hyphenate(property), value);\n  };\n  _proto.remove = function remove() {\n    removeElement(this.node);\n  };\n  return SVGElement;\n}();\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar SVGShapeElement = /*#__PURE__*/function (_SVGElement) {\n  function SVGShapeElement(name, config, style) {\n    var _this;\n    if (style === void 0) {\n      style = {};\n    }\n    _this = _SVGElement.call(this, name, config) || this;\n    _this.isHovered = false;\n    _this.isSelected = false;\n    _this.style = style;\n    _this.style.current = {};\n    _this.updateStyle();\n    return _this;\n  }\n  _inheritsLoose(SVGShapeElement, _SVGElement);\n  var _proto = SVGShapeElement.prototype;\n  _proto.setStyle = function setStyle(property, value) {\n    if (typeof property === 'object') {\n      merge(this.style.current, property);\n    } else {\n      var _merge;\n      merge(this.style.current, (_merge = {}, _merge[property] = value, _merge));\n    }\n    this.updateStyle();\n  };\n  _proto.updateStyle = function updateStyle() {\n    var attrs = {};\n    merge(attrs, this.style.initial);\n    merge(attrs, this.style.current);\n    if (this.isHovered) {\n      merge(attrs, this.style.hover);\n    }\n    if (this.isSelected) {\n      merge(attrs, this.style.selected);\n      if (this.isHovered) {\n        merge(attrs, this.style.selectedHover);\n      }\n    }\n    this.set(attrs);\n  };\n  return SVGShapeElement;\n}(SVGElement);\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar SVGTextElement = /*#__PURE__*/function (_SVGShapeElement) {\n  function SVGTextElement(config, style) {\n    return _SVGShapeElement.call(this, 'text', config, style) || this;\n  }\n  _inheritsLoose(SVGTextElement, _SVGShapeElement);\n  var _proto = SVGTextElement.prototype;\n  _proto.applyAttr = function applyAttr(attr, value) {\n    attr === 'text' ? this.node.textContent = value : _SVGShapeElement.prototype.applyAttr.call(this, attr, value);\n  };\n  return SVGTextElement;\n}(SVGShapeElement);\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar SVGImageElement = /*#__PURE__*/function (_SVGShapeElement) {\n  function SVGImageElement(config, style) {\n    return _SVGShapeElement.call(this, 'image', config, style) || this;\n  }\n  _inheritsLoose(SVGImageElement, _SVGShapeElement);\n  var _proto = SVGImageElement.prototype;\n  _proto.applyAttr = function applyAttr(attr, value) {\n    var imageUrl;\n    if (attr === 'image') {\n      // This get executed when we have url in series.markers[0].scale.someScale.url\n      if (typeof value === 'object') {\n        imageUrl = value.url;\n        this.offset = value.offset || [0, 0];\n      } else {\n        imageUrl = value;\n        this.offset = [0, 0];\n      }\n      this.node.setAttributeNS('http://www.w3.org/1999/xlink', 'href', imageUrl);\n\n      // Set width and height then call this `applyAttr` again\n      this.width = 23;\n      this.height = 23;\n      this.applyAttr('width', this.width);\n      this.applyAttr('height', this.height);\n      this.applyAttr('x', this.cx - this.width / 2 + this.offset[0]);\n      this.applyAttr('y', this.cy - this.height / 2 + this.offset[1]);\n    } else if (attr == 'cx') {\n      this.cx = value;\n      if (this.width) {\n        this.applyAttr('x', value - this.width / 2 + this.offset[0]);\n      }\n    } else if (attr == 'cy') {\n      this.cy = value;\n      if (this.height) {\n        this.applyAttr('y', value - this.height / 2 + this.offset[1]);\n      }\n    } else {\n      // This time Call SVGElement\n      _SVGShapeElement.prototype.applyAttr.apply(this, arguments);\n    }\n  };\n  return SVGImageElement;\n}(SVGShapeElement);\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar SVGCanvasElement = /*#__PURE__*/function (_SVGElement) {\n  function SVGCanvasElement(container) {\n    var _this;\n    _this = _SVGElement.call(this, 'svg') || this; // Create svg element for holding the whole map\n\n    _this._container = container;\n\n    // Create the defs element\n    _this._defsElement = new SVGElement('defs');\n\n    // Create group element which will hold the paths (regions)\n    _this._rootElement = new SVGElement('g', {\n      id: 'jvm-regions-group'\n    });\n\n    // Append the defs element to the this.node (SVG tag)\n    _this.node.appendChild(_this._defsElement.node);\n\n    // Append the group to this.node (SVG tag)\n    _this.node.appendChild(_this._rootElement.node);\n\n    // Append this.node (SVG tag) to the container\n    _this._container.appendChild(_this.node);\n    return _this;\n  }\n  _inheritsLoose(SVGCanvasElement, _SVGElement);\n  var _proto = SVGCanvasElement.prototype;\n  _proto.setSize = function setSize(width, height) {\n    this.node.setAttribute('width', width);\n    this.node.setAttribute('height', height);\n  };\n  _proto.applyTransformParams = function applyTransformParams(scale, transX, transY) {\n    this._rootElement.node.setAttribute('transform', \"scale(\" + scale + \") translate(\" + transX + \", \" + transY + \")\");\n  }\n\n  // Create `path` element\n  ;\n  _proto.createPath = function createPath(config, style) {\n    var path = new SVGShapeElement('path', config, style);\n    path.node.setAttribute('fill-rule', 'evenodd');\n    return this._add(path);\n  }\n\n  // Create `circle` element\n  ;\n  _proto.createCircle = function createCircle(config, style, group) {\n    var circle = new SVGShapeElement('circle', config, style);\n    return this._add(circle, group);\n  }\n\n  // Create `line` element\n  ;\n  _proto.createLine = function createLine(config, style, group) {\n    var line = new SVGShapeElement('line', config, style);\n    return this._add(line, group);\n  }\n\n  // Create `text` element\n  ;\n  _proto.createText = function createText(config, style, group) {\n    var text = new SVGTextElement(config, style);\n    return this._add(text, group);\n  }\n\n  // Create `image` element\n  ;\n  _proto.createImage = function createImage(config, style, group) {\n    var image = new SVGImageElement(config, style);\n    return this._add(image, group);\n  }\n\n  // Create `g` element\n  ;\n  _proto.createGroup = function createGroup(id) {\n    var group = new SVGElement('g');\n    this.node.appendChild(group.node);\n    if (id) {\n      group.node.id = id;\n    }\n    group.canvas = this;\n    return group;\n  }\n\n  // Add some element to a spcific group or the root element if the group isn't given\n  ;\n  _proto._add = function _add(element, group) {\n    group = group || this._rootElement;\n    group.node.appendChild(element.node);\n    return element;\n  };\n  return SVGCanvasElement;\n}(SVGElement);\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Tooltip = /*#__PURE__*/function (_BaseComponent) {\n  function Tooltip(map) {\n    var _this;\n    _this = _BaseComponent.call(this) || this;\n    var tooltip = createElement('div', 'jvm-tooltip');\n    _this._map = map;\n    _this._tooltip = document.body.appendChild(tooltip);\n    _this._bindEventListeners();\n    return _this || _assertThisInitialized(_this);\n  }\n  _inheritsLoose(Tooltip, _BaseComponent);\n  var _proto = Tooltip.prototype;\n  _proto._bindEventListeners = function _bindEventListeners() {\n    var _this2 = this;\n    EventHandler.on(this._map.container, 'mousemove', function (event) {\n      if (!_this2._tooltip.classList.contains('active')) {\n        return;\n      }\n      var container = findElement(_this2._map.container, '#jvm-regions-group').getBoundingClientRect();\n      var space = 5; // Space between the cursor and tooltip element\n\n      // Tooltip\n      var _this2$_tooltip$getBo = _this2._tooltip.getBoundingClientRect(),\n        height = _this2$_tooltip$getBo.height,\n        width = _this2$_tooltip$getBo.width;\n      var topIsPassed = event.clientY <= container.top + height + space;\n      var top = event.pageY - height - space;\n      var left = event.pageX - width - space;\n\n      // Ensure the tooltip will never cross outside the canvas area(map)\n      if (topIsPassed) {\n        // Top:\n        top += height + space;\n\n        // The cursor is a bit larger from left side\n        left -= space * 2;\n      }\n      if (event.clientX < container.left + width + space) {\n        // Left:\n        left = event.pageX + space + 2;\n        if (topIsPassed) {\n          left += space * 2;\n        }\n      }\n      _this2.css({\n        top: top + \"px\",\n        left: left + \"px\"\n      });\n    });\n  };\n  _proto.getElement = function getElement() {\n    return this._tooltip;\n  };\n  _proto.show = function show() {\n    this._tooltip.classList.add('active');\n  };\n  _proto.hide = function hide() {\n    this._tooltip.classList.remove('active');\n  };\n  _proto.text = function text(string, html) {\n    if (html === void 0) {\n      html = false;\n    }\n    var property = html ? 'innerHTML' : 'textContent';\n    if (!string) {\n      return this._tooltip[property];\n    }\n    this._tooltip[property] = string;\n  };\n  _proto.css = function css(_css) {\n    for (var style in _css) {\n      this._tooltip.style[style] = _css[style];\n    }\n    return this;\n  };\n  return Tooltip;\n}(BaseComponent);\n\nvar DataVisualization = /*#__PURE__*/function () {\n  function DataVisualization(_ref, map) {\n    var scale = _ref.scale,\n      values = _ref.values;\n    this._scale = scale;\n    this._values = values;\n    this._fromColor = this.hexToRgb(scale[0]);\n    this._toColor = this.hexToRgb(scale[1]);\n    this._map = map;\n    this.setMinMaxValues(values);\n    this.visualize();\n  }\n  var _proto = DataVisualization.prototype;\n  _proto.setMinMaxValues = function setMinMaxValues(values) {\n    this.min = Number.MAX_VALUE;\n    this.max = 0;\n    for (var value in values) {\n      value = parseFloat(values[value]);\n      if (value > this.max) {\n        this.max = value;\n      }\n      if (value < this.min) {\n        this.min = value;\n      }\n    }\n  };\n  _proto.visualize = function visualize() {\n    var attrs = {},\n      value;\n    for (var regionCode in this._values) {\n      value = parseFloat(this._values[regionCode]);\n      if (!isNaN(value)) {\n        attrs[regionCode] = this.getValue(value);\n      }\n    }\n    this.setAttributes(attrs);\n  };\n  _proto.setAttributes = function setAttributes(attrs) {\n    for (var code in attrs) {\n      if (this._map.regions[code]) {\n        this._map.regions[code].element.setStyle('fill', attrs[code]);\n      }\n    }\n  };\n  _proto.getValue = function getValue(value) {\n    if (this.min === this.max) {\n      return \"#\" + this._toColor.join('');\n    }\n    var hex,\n      color = '#';\n    for (var i = 0; i < 3; i++) {\n      hex = Math.round(this._fromColor[i] + (this._toColor[i] - this._fromColor[i]) * ((value - this.min) / (this.max - this.min))).toString(16);\n      color += (hex.length === 1 ? '0' : '') + hex;\n    }\n    return color;\n  };\n  _proto.hexToRgb = function hexToRgb(h) {\n    var r = 0,\n      g = 0,\n      b = 0;\n    if (h.length == 4) {\n      r = '0x' + h[1] + h[1];\n      g = '0x' + h[2] + h[2];\n      b = '0x' + h[3] + h[3];\n    } else if (h.length == 7) {\n      r = '0x' + h[1] + h[2];\n      g = '0x' + h[3] + h[4];\n      b = '0x' + h[5] + h[6];\n    }\n    return [parseInt(r), parseInt(g), parseInt(b)];\n  };\n  return DataVisualization;\n}();\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar Map = /*#__PURE__*/function () {\n  function Map(options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    // Merge the given options with the default options\n    this.params = merge(Map.defaults, options, true);\n\n    // Throw an error if the given map name doesn't match\n    // the map that was set in map file\n    if (!Map.maps[this.params.map]) {\n      throw new Error(\"Attempt to use map which was not loaded: \" + options.map);\n    }\n    this.regions = {};\n    this.scale = 1;\n    this.transX = 0;\n    this.transY = 0;\n    this._mapData = Map.maps[this.params.map];\n    this._markers = {};\n    this._lines = {};\n    this._defaultWidth = this._mapData.width;\n    this._defaultHeight = this._mapData.height;\n    this._height = 0;\n    this._width = 0;\n    this._baseScale = 1;\n    this._baseTransX = 0;\n    this._baseTransY = 0;\n\n    // `document` is already ready, just initialise now\n    if (document.readyState !== 'loading') {\n      this._init();\n    } else {\n      // Wait until `document` is ready\n      window.addEventListener('DOMContentLoaded', function () {\n        return _this._init();\n      });\n    }\n  }\n  var _proto = Map.prototype;\n  _proto._init = function _init() {\n    var options = this.params;\n    this.container = getElement(options.selector);\n    this.container.classList.add('jvm-container');\n\n    // The map canvas element\n    this.canvas = new SVGCanvasElement(this.container);\n\n    // Set the map's background color\n    this.setBackgroundColor(options.backgroundColor);\n\n    // Create regions\n    this._createRegions();\n\n    // Update size\n    this.updateSize();\n\n    // Create lines\n    this._createLines(options.lines || {}, options.markers || {});\n\n    // Create markers\n    this._createMarkers(options.markers);\n\n    // Position labels\n    this._repositionLabels();\n\n    // Setup the container events\n    this._setupContainerEvents();\n\n    // Setup regions/markers events\n    this._setupElementEvents();\n\n    // Create zoom buttons if `zoomButtons` is presented\n    if (options.zoomButtons) {\n      this._setupZoomButtons();\n    }\n\n    // Create toolip\n    if (options.showTooltip) {\n      this._tooltip = new Tooltip(this);\n    }\n\n    // Set selected regions if any\n    if (options.selectedRegions) {\n      this._setSelected('regions', options.selectedRegions);\n    }\n\n    // Set selected regions if any\n    if (options.selectedMarkers) {\n      this._setSelected('_markers', options.selectedMarkers);\n    }\n\n    // Set focus on a spcific region\n    if (options.focusOn) {\n      this.setFocus(options.focusOn);\n    }\n\n    // Data visualization\n    if (options.visualizeData) {\n      this.dataVisualization = new DataVisualization(options.visualizeData, this);\n    }\n\n    // Bind touch events if true\n    if (options.bindTouchEvents) {\n      if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n        this._setupContainerTouchEvents();\n      }\n    }\n\n    // Create series if any\n    if (options.series) {\n      this.container.appendChild(this.legendHorizontal = createElement('div', 'jvm-series-container jvm-series-h'));\n      this.container.appendChild(this.legendVertical = createElement('div', 'jvm-series-container jvm-series-v'));\n      this._createSeries();\n    }\n\n    // Fire loaded event\n    this._emit(Events.onLoaded, [this]);\n  }\n\n  // Public\n  ;\n  _proto.setBackgroundColor = function setBackgroundColor(color) {\n    this.container.style.backgroundColor = color;\n  }\n\n  // Region methods\n  ;\n  _proto.getSelectedRegions = function getSelectedRegions() {\n    return this._getSelected('regions');\n  };\n  _proto.clearSelectedRegions = function clearSelectedRegions(regions) {\n    var _this2 = this;\n    if (regions === void 0) {\n      regions = undefined;\n    }\n    regions = this._normalizeRegions(regions) || this._getSelected('regions');\n    regions.forEach(function (key) {\n      _this2.regions[key].element.select(false);\n    });\n  };\n  _proto.setSelectedRegions = function setSelectedRegions(regions) {\n    this.clearSelectedRegions();\n    this._setSelected('regions', this._normalizeRegions(regions));\n  }\n\n  // Markers methods\n  ;\n  _proto.getSelectedMarkers = function getSelectedMarkers() {\n    return this._getSelected('_markers');\n  };\n  _proto.clearSelectedMarkers = function clearSelectedMarkers() {\n    this._clearSelected('_markers');\n  };\n  _proto.addMarkers = function addMarkers(config) {\n    config = Array.isArray(config) ? config : [config];\n    this._createMarkers(config, true);\n  };\n  _proto.removeMarkers = function removeMarkers(markers) {\n    var _this3 = this;\n    if (!markers) {\n      markers = Object.keys(this._markers);\n    }\n    markers.forEach(function (index) {\n      // Remove the element from the DOM\n      _this3._markers[index].element.remove();\n      // Remove the element from markers object\n      delete _this3._markers[index];\n    });\n  };\n  _proto.addLine = function addLine(from, to, style) {\n    if (style === void 0) {\n      style = {};\n    }\n    console.warn('`addLine` method is deprecated, please use `addLines` instead.');\n    this._createLines([{\n      from: from,\n      to: to,\n      style: style\n    }], this._markers, true);\n  };\n  _proto.addLines = function addLines(config) {\n    var uids = this._getLinesAsUids();\n    if (!Array.isArray(config)) {\n      config = [config];\n    }\n    this._createLines(config.filter(function (line) {\n      return !(uids.indexOf(getLineUid(line.from, line.to)) > -1);\n    }), this._markers, true);\n  };\n  _proto.removeLines = function removeLines(lines) {\n    var _this4 = this;\n    if (Array.isArray(lines)) {\n      lines = lines.map(function (line) {\n        return getLineUid(line.from, line.to);\n      });\n    } else {\n      lines = this._getLinesAsUids();\n    }\n    lines.forEach(function (uid) {\n      _this4._lines[uid].dispose();\n      delete _this4._lines[uid];\n    });\n  };\n  _proto.removeLine = function removeLine(from, to) {\n    console.warn('`removeLine` method is deprecated, please use `removeLines` instead.');\n    var uid = getLineUid(from, to);\n    if (this._lines.hasOwnProperty(uid)) {\n      this._lines[uid].element.remove();\n      delete this._lines[uid];\n    }\n  }\n\n  // Reset map\n  ;\n  _proto.reset = function reset() {\n    for (var key in this.series) {\n      for (var i = 0; i < this.series[key].length; i++) {\n        this.series[key][i].clear();\n      }\n    }\n    if (this.legendHorizontal) {\n      removeElement(this.legendHorizontal);\n      this.legendHorizontal = null;\n    }\n    if (this.legendVertical) {\n      removeElement(this.legendVertical);\n      this.legendVertical = null;\n    }\n    this.scale = this._baseScale;\n    this.transX = this._baseTransX;\n    this.transY = this._baseTransY;\n    this._applyTransform();\n    this.clearSelectedMarkers();\n    this.clearSelectedRegions();\n    this.removeMarkers();\n  }\n\n  // Destroy the map\n  ;\n  _proto.destroy = function destroy(destroyInstance) {\n    var _this5 = this;\n    if (destroyInstance === void 0) {\n      destroyInstance = true;\n    }\n    // Remove event registry\n    EventHandler.flush();\n\n    // Remove tooltip from DOM and memory\n    this._tooltip.dispose();\n\n    // Fire destroyed event\n    this._emit(Events.onDestroyed);\n\n    // Remove references\n    if (destroyInstance) {\n      Object.keys(this).forEach(function (key) {\n        try {\n          delete _this5[key];\n        } catch (e) {}\n      });\n    }\n  };\n  _proto.extend = function extend(name, callback) {\n    if (typeof this[name] === 'function') {\n      throw new Error(\"The method [\" + name + \"] does already exist, please use another name.\");\n    }\n    Map.prototype[name] = callback;\n  }\n\n  // Private\n  ;\n  _proto._emit = function _emit(eventName, args) {\n    for (var event in Events) {\n      if (Events[event] === eventName && typeof this.params[event] === 'function') {\n        this.params[event].apply(this, args);\n      }\n    }\n  }\n\n  // Get selected markers/regions\n  ;\n  _proto._getSelected = function _getSelected(type) {\n    var selected = [];\n    for (var key in this[type]) {\n      if (this[type][key].element.isSelected) {\n        selected.push(key);\n      }\n    }\n    return selected;\n  };\n  _proto._setSelected = function _setSelected(type, keys) {\n    var _this6 = this;\n    keys.forEach(function (key) {\n      if (_this6[type][key]) {\n        _this6[type][key].element.select(true);\n      }\n    });\n  };\n  _proto._clearSelected = function _clearSelected(type) {\n    var _this7 = this;\n    this._getSelected(type).forEach(function (key) {\n      _this7[type][key].element.select(false);\n    });\n  };\n  _proto._getLinesAsUids = function _getLinesAsUids() {\n    return Object.keys(this._lines);\n  };\n  _proto._normalizeRegions = function _normalizeRegions(regions) {\n    return typeof regions === 'string' ? [regions] : regions;\n  };\n  return Map;\n}();\nMap.maps = {};\nMap.defaults = Defaults;\nObject.assign(Map.prototype, core);\n\n/**\n * jsVectorMap\n * Copyrights (c) Mustafa Omar https://github.com/themustafaomar\n * Released under the MIT License.\n */\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\nvar jsVectorMap = /*#__PURE__*/function () {\n  function jsVectorMap(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (!options.selector) {\n      throw new Error('Selector is not given.');\n    }\n    return new Map(options);\n  }\n\n  // Public\n  jsVectorMap.addMap = function addMap(name, map) {\n    Map.maps[name] = map;\n  };\n  return jsVectorMap;\n}();\nvar index = window.jsVectorMap = jsVectorMap;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsvectormap/dist/jsvectormap.esm.js\n");

/***/ })

};
;